name: 'Actions Workflow'
on:
  workflow_dispatch: {}
  pull_request:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - 'CHANGELOG.md'
      - 'README.md'

env:
  PULUMI_VERSION: '^3'

jobs:
  install-and-build:
    name: Install and Build GHA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn

      - run: yarn install

      - run: yarn build

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: HEAD
          filters: |
            dist:
              - 'dist/**'
              - .github/workflows/**

      - name: Upload artifacts
        if: steps.changes.outputs.dist == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

    outputs:
      changed: ${{ steps.changes.outputs.dist }}

  test-dotnet-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Dotnet ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Download dist artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          version: ${{ env.PULUMI_VERSION }}
          upsert: true
          downsert: true
          stack-name: dev
          work-dir: .github/test-stacks/dotnet
          config-map: "{name: {value: my-pet, secret: false}}"

  test-golang-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Golang ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Download dist artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - uses: actions/setup-go@v3
        with:
          go-version: 1.17.x

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          version: ${{ env.PULUMI_VERSION }}
          stack-name: dev
          upsert: true
          downsert: true
          work-dir: .github/test-stacks/golang
          config-map: "{name: {value: my-user-name, secret: false}}"

  test-nodejs-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: NodeJS ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Download dist artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm install
        working-directory: .github/test-stacks/nodejs

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          version: ${{ env.PULUMI_VERSION }}
          stack-name: dev
          upsert: true
          downsert: true
          work-dir: .github/test-stacks/nodejs
          config-map: "{name: {value: hostname, secret: false}}"

  test-python-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Python ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Download dist artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v4.1.0
        with:
          python-version: 3.9

      - uses: actions/cache@v3
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v3
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v3
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - run: pip install -r requirements.txt
        working-directory: .github/test-stacks/python

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          version: ${{ env.PULUMI_VERSION }}
          stack-name: dev
          upsert: true
          downsert: true
          work-dir: .github/test-stacks/python
          config-map: "{name: {value: hostname, secret: false}}"

  test-generic-inputs:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Inputs on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Download dist artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - run: npm install
        working-directory: .github/test-stacks/nodejs

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: up
          cloud-url: file://~
          version: ${{ env.PULUMI_VERSION }}
          stack-name: dev
          work-dir: .github/test-stacks/nodejs
          upsert: true
          downsert: true
          refresh: true
          config-map: "{name: {value: hostname, secret: false}}"

name: 'Actions Workflow'
on:
  pull_request:
  push:
    branches:
      - main
      - master

jobs:
  install-and-build:
    name: Install and Build GHA
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: true
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2.1.5
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install

      - run: yarn build

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: HEAD
          filters: |
            dist:
              - 'dist/**'

      - name: Upload artifacts
        if: steps.changes.outputs.dist == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ runner.os }}
          path: dist
    outputs:
      changed: ${{ steps.changes.outputs.dist }}

  test-dotnet-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Dotnet ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-${{ runner.os }}

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1

      - name: Install pulumi
        uses: pulumi/action-install-pulumi-cli@v1

      - name: Create local stack
        run: |
          pulumi login --local
          pulumi stack init dev
        working-directory: .github/test-stacks/dotnet
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          stack-name: dev
          work-dir: .github/test-stacks/dotnet

  test-golang-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Golang ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-${{ runner.os }}

      - uses: actions/setup-go@v2
        with:
          go-version: 1.15.x

      - name: Install pulumi
        uses: pulumi/action-install-pulumi-cli@v1

      - name: Create local stack
        run: |
          pulumi login --local
          pulumi stack init dev
        working-directory: .github/test-stacks/golang
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          stack-name: dev
          work-dir: .github/test-stacks/golang

  test-nodejs-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: NodeJS ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-${{ runner.os }}

      - uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Install pulumi
        uses: pulumi/action-install-pulumi-cli@v1

      - name: Create local stack
        run: |
          pulumi login --local
          pulumi stack init dev
        working-directory: .github/test-stacks/nodejs
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2.1.5
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm install
        working-directory: .github/test-stacks/nodejs

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          stack-name: dev
          work-dir: .github/test-stacks/nodejs

  test-python-stack:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Python ${{ matrix.command }} on ${{ matrix.os }}
    strategy:
      matrix:
        command: [up, refresh, destroy, preview]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-${{ runner.os }}

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install pulumi
        uses: pulumi/action-install-pulumi-cli@v1

      - name: Create local stack
        run: |
          pulumi login --local
          pulumi stack init dev
        working-directory: .github/test-stacks/golang
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret

      - uses: actions/cache@v2.1.5
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2.1.5
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2.1.5
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - run: pip install -r requirements.txt
        working-directory: .github/test-stacks/python

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: ${{ matrix.command }}
          cloud-url: file://~
          stack-name: dev
          work-dir: .github/test-stacks/python

  test-generic-inputs:
    needs: install-and-build
    if: ${{ needs.install-and-build.outputs.changed == 'true' }}
    runs-on: ${{ matrix.os }}
    name: Inputs on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-${{ runner.os }}

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v2.1.5
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Install pulumi
        uses: pulumi/action-install-pulumi-cli@v1

      - name: Create local stack
        run: |
          pulumi login --local
        working-directory: .github/test-stacks/nodejs
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret

      - run: npm install
        working-directory: .github/test-stacks/nodejs

      - uses: ./
        env:
          PULUMI_CONFIG_PASSPHRASE: not-a-secret
        with:
          command: up
          cloud-url: file://~
          stack-name: dev
          work-dir: .github/test-stacks/nodejs
          upsert: true
          refresh: true
